{"version":3,"sources":["assets/noPoster.png","api.js","Components/Loading.js","Components/Poster.js","Components/Section.js","Components/ErrorText.js","Routes/Home/HomePresenter.js","hooks.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Components/YTLink.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","api","axios","create","baseURL","params","api_key","language","movies","id","get","append_to_response","term","query","encodeURIComponent","tv","Container","styled","div","role","aria-label","Votes","span","Image","props","bgImage","ImageContainer","Name","Year","Poster","imageUrl","rating","name","year","isTv","to","require","length","substring","SectionTitle","h2","Grid","Section","title","children","ErrorText","text","HomePresenter","loading","error","popular","upcoming","nowPlaying","Loading","map","movie","poster_path","vote_average","release_date","key","useApi","initialLoading","inputFn","errorMessage","useState","setLoading","setError","wrappedFn","a","HomeContainer","getMovies","data","results","setData","useEffect","topRated","airingToday","show","original_name","first_air_date","TVContainer","TVPresenter","Header","nav","NavLink","Link","selected","withRouter","pathname","location","Form","form","Input","input","SearchPresenter","movieResults","showResults","searchingBy","onSearchChange","onSearchSubmit","onSubmit","placeholder","autoFocus","value","onChange","String","SearchContainer","search","setSearchingBy","event","target","preventDefault","YTLink","href","xmlns","width","height","viewBox","d","Background","Content","Data","InfoRow","InfoItem","Bullet","Overview","p","Title","CountryName","CompanyLogoContainer","CompanyLogo","PosterContainer","PosterImg","PosterName","DetailPresenter","result","backdrop_path","original_title","episode_run_time","runtime","genres","genre","index","status","overview","production_companies","company","logo_path","production_countries","country","seasons","season","videos","video","site","DetailContainer","match","includes","setResult","path","exact","component","Home","TV","Search","Detail","GlobalStyles","createGlobalStyle","reset","App","Router","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45802303.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPoster.c7ad09df.png\";","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.themoviedb.org/3/\",\n  params: { api_key: \"10923b261ba94d897ac6b81148314a3f\", language: \"en-US\" }\n});\n\nexport const movies = {\n  getMovie: id =>\n    api.get(`movie/${id}`, { params: { append_to_response: \"videos\" } }),\n  getPopular: () => api.get(\"movie/popular\"),\n  getUpcoming: () => api.get(\"movie/upcoming\"),\n  getNowPlaying: () => api.get(\"movie/now_playing\"),\n  searchMovies: term =>\n    api.get(\"search/movie\", {\n      params: {\n        query: encodeURIComponent(term)\n      }\n    })\n};\n\nexport const tv = {\n  getShow: id =>\n    api.get(`tv/${id}`, { params: { append_to_response: \"videos\" } }),\n  getPopular: () => api.get(\"tv/popular\"),\n  getTopRated: () => api.get(\"tv/top_rated\"),\n  getAiringToday: () => api.get(\"tv/airing_today\"),\n  searchTv: term =>\n    api.get(\"search/tv\", {\n      params: {\n        query: encodeURIComponent(term)\n      }\n    })\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  height: 80vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-content: flex-start;\n  margin-top: 50px;\n  font-size: 30px;\n`;\n\nexport default () => (\n  <Container>\n    <span role=\"img\" aria-label=\"loading\">\n      ⏰\n    </span>\n  </Container>\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nconst Container = styled.div`\n  color: white;\n  width: 125px;\n`;\n\nconst Votes = styled.span`\n  font-size: 12px;\n  position: relative;\n  z-index: 9;\n  transition: opacity 0.3s ease-in-out;\n`;\n\nconst Image = styled.div`\n  background-image: url(${props => props.bgImage});\n  background-size: cover;\n  background-position: center center;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  border-radius: 5px;\n  box-shadow: 0px 2px 5px 3px rgba(0, 0, 0, 0.5);\n  transition: opacity 0.3s ease-in-out;\n  z-index: 1;\n`;\n\nconst ImageContainer = styled.div`\n  position: relative;\n  z-index: 2;\n  height: 180px;\n  margin-bottom: 5px;\n  display: flex;\n  align-items: flex-end;\n  justify-content: flex-end;\n  padding: 5px;\n  ${Votes} {\n    opacity: 0;\n  }\n  &:hover {\n    ${Votes} {\n      opacity: 1;\n    }\n    ${Image} {\n      opacity: 0.3;\n    }\n  }\n`;\n\nconst Name = styled.span`\n  color: rgba(255, 255, 255, 0.8);\n  display: block;\n  margin-bottom: 7px;\n  text-overflow: ellipsis;\n  width: 100%;\n  overflow: hidden;\n  font-size: 12px;\n`;\n\nconst Year = styled.span`\n  font-size: 10px;\n  color: rgba(255, 255, 255, 0.5);\n`;\n\nconst Poster = ({ imageUrl, rating, name, year, isTv, id }) => (\n  <Link to={isTv ? `/show/${id}` : `/movie/${id}`}>\n    <Container>\n      <ImageContainer>\n        <Image\n          bgImage={\n            imageUrl\n              ? `https://image.tmdb.org/t/p/w500${imageUrl}`\n              : require(\"../assets/noPoster.png\")\n          }\n        />\n        {rating > 0 ? (\n          <Votes>\n            <span role=\"img\" aria-label=\"Stars\">\n              ⭐️\n            </span>{\" \"}\n            {rating}/10\n          </Votes>\n        ) : null}\n      </ImageContainer>\n\n      <Name>{name.length > 18 ? `${name.substring(0, 18)}...` : name}</Name>\n\n      <Year>{year}</Year>\n    </Container>\n  </Link>\n);\n\nPoster.propTypes = {\n  id: PropTypes.number.isRequired,\n  imageUrl: PropTypes.string,\n  rating: PropTypes.number,\n  name: PropTypes.string.isRequired,\n  year: PropTypes.string.isRequired,\n  isTv: PropTypes.bool.isRequired\n};\n\nexport default Poster;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  margin-bottom: 50px;\n`;\n\nconst SectionTitle = styled.h2`\n  font-weight: 600;\n  color: white;\n  font-size: 14px;\n  margin-bottom: 20px;\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 125px);\n  grid-gap: 30px;\n`;\n\nconst Section = ({ title, children }) => (\n  <Container>\n    <SectionTitle>{title}</SectionTitle>\n    <Grid>{children}</Grid>\n  </Container>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ])\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.span`\n  display: block;\n  color: #e74c3c;\n  width: 100%;\n  text-align: center;\n  margin-top: 50px;\n  font-size: 14px;\n`;\n\nconst ErrorText = ({ text }) => <Container>{text}</Container>;\n\nErrorText.propTypes = {\n  text: PropTypes.string.isRequired\n};\n\nexport default ErrorText;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Loading from \"Components/Loading\";\nimport Poster from \"Components/Poster\";\nimport Section from \"Components/Section\";\nimport ErrorText from \"Components/ErrorText\";\n\nconst Container = styled.div`\n  padding: 10px;\n  padding-top: 30px;\n`;\n\nconst HomePresenter = ({ loading, error, popular, upcoming, nowPlaying }) =>\n  loading ? (\n    <Loading />\n  ) : (\n    <Container>\n      {popular && (\n        <Section title=\"Popular Movies\">\n          {popular.map(movie => (\n            <Poster\n              imageUrl={movie.poster_path}\n              rating={movie.vote_average}\n              name={movie.title}\n              year={movie.release_date.substring(0, 4)}\n              isTv={false}\n              id={movie.id}\n              key={movie.id}\n            />\n          ))}\n        </Section>\n      )}\n      {upcoming && (\n        <Section title=\"Upcoming Movies\">\n          {upcoming.map(movie => (\n            <Poster\n              imageUrl={movie.poster_path}\n              rating={movie.vote_average}\n              name={movie.title}\n              year={movie.release_date.substring(0, 4)}\n              isTv={false}\n              id={movie.id}\n              key={movie.id}\n            />\n          ))}\n        </Section>\n      )}\n      {nowPlaying && (\n        <Section title=\"Now Playing\">\n          {nowPlaying.map(movie => (\n            <Poster\n              imageUrl={movie.poster_path}\n              rating={movie.vote_average}\n              name={movie.title}\n              year={movie.release_date.substring(0, 4)}\n              isTv={false}\n              id={movie.id}\n              key={movie.id}\n            />\n          ))}\n        </Section>\n      )}\n      {error && <ErrorText text={error} />}\n    </Container>\n  );\n\nHomePresenter.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n  popular: PropTypes.array,\n  upcoming: PropTypes.array,\n  nowPlaying: PropTypes.array\n};\n\nexport default HomePresenter;\n","import { useState } from \"react\";\n\nexport const useApi = ({ initialLoading = true, inputFn, errorMessage }) => {\n  const [loading, setLoading] = useState(initialLoading);\n  const [error, setError] = useState(\"\");\n\n  const wrappedFn = async (...args) => {\n    try {\n      await inputFn(...args);\n    } catch (error) {\n      setError(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { loading, error, wrappedFn, setLoading };\n};\n","import HomeContainer from \"./HomeContainer\";\nexport default HomeContainer;\n","import React, { useEffect, useState } from \"react\";\nimport { movies } from \"../../api\";\nimport HomePresenter from \"./HomePresenter\";\nimport { useApi } from \"../../hooks\";\n\nexport default () => {\n  const getMovies = async () => {\n    const {\n      data: { results: popular }\n    } = await movies.getPopular();\n    const {\n      data: { results: upcoming }\n    } = await movies.getUpcoming();\n    const {\n      data: { results: nowPlaying }\n    } = await movies.getNowPlaying();\n    setData({\n      popular,\n      upcoming,\n      nowPlaying\n    });\n  };\n\n  const [data, setData] = useState({\n    popular: null,\n    upcoming: null,\n    nowPlaying: null\n  });\n  const { loading, error, wrappedFn } = useApi({\n    inputFn: getMovies,\n    errorMessage: \"Could not get movies\"\n  });\n\n  useEffect(() => {\n    wrappedFn(\"dick\", true);\n  }, []);\n\n  return (\n    <HomePresenter\n      loading={loading}\n      error={error}\n      popular={data.popular}\n      upcoming={data.upcoming}\n      nowPlaying={data.nowPlaying}\n    />\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Loading from \"Components/Loading\";\nimport Poster from \"Components/Poster\";\nimport Section from \"Components/Section\";\nimport ErrorText from \"Components/ErrorText\";\n\nconst Container = styled.div`\n  padding: 10px;\n  padding-top: 30px;\n`;\n\nconst HomePresenter = ({ loading, error, popular, topRated, airingToday }) =>\n  loading ? (\n    <Loading />\n  ) : (\n    <Container>\n      {popular && (\n        <Section title=\"Popular Shows\">\n          {popular.map(show => (\n            <Poster\n              imageUrl={show.poster_path}\n              rating={show.vote_average}\n              name={show.original_name}\n              year={show.first_air_date.substring(0, 4)}\n              isTv={true}\n              id={show.id}\n              key={show.id}\n            />\n          ))}\n        </Section>\n      )}\n      {topRated && (\n        <Section title=\"Top Rated\">\n          {topRated.map(show => (\n            <Poster\n              imageUrl={show.poster_path}\n              rating={show.vote_average}\n              name={show.original_name}\n              year={show.first_air_date.substring(0, 4)}\n              isTv={true}\n              id={show.id}\n              key={show.id}\n            />\n          ))}\n        </Section>\n      )}\n      {airingToday && (\n        <Section title=\"Airing Today\">\n          {airingToday.map(show => (\n            <Poster\n              imageUrl={show.poster_path}\n              rating={show.vote_average}\n              name={show.original_name}\n              year={show.first_air_date.substring(0, 4)}\n              isTv={true}\n              id={show.id}\n              key={show.id}\n            />\n          ))}\n        </Section>\n      )}\n      {error && <ErrorText text={error} />}\n    </Container>\n  );\n\nHomePresenter.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n  popular: PropTypes.array,\n  topRated: PropTypes.array,\n  airingToday: PropTypes.array\n};\n\nexport default HomePresenter;\n","import TVContainer from \"./TVContainer\";\n\nexport default TVContainer;\n","import React, { useState, useEffect } from \"react\";\nimport TVPresenter from \"./TVPresenter\";\nimport { tv } from \"../../api\";\nimport { useApi } from \"../../hooks\";\n\nexport default () => {\n  const getTv = async () => {\n    const {\n      data: { results: popular }\n    } = await tv.getPopular();\n    const {\n      data: { results: topRated }\n    } = await tv.getTopRated();\n    const {\n      data: { results: airingToday }\n    } = await tv.getAiringToday();\n    setData({\n      popular,\n      topRated,\n      airingToday\n    });\n  };\n\n  const { loading, error, wrappedFn } = useApi({\n    inputFn: getTv,\n    errorMessage: \"Could not get tv shows\"\n  });\n  const [data, setData] = useState({\n    popular: null,\n    topRated: null,\n    airingToday: null\n  });\n\n  useEffect(() => {\n    wrappedFn();\n  }, []);\n\n  return (\n    <TVPresenter\n      loading={loading}\n      error={error}\n      popular={data.popular}\n      topRated={data.topRated}\n      airingToday={data.airingToday}\n    />\n  );\n};\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Header = styled.nav`\n  background-color: rgba(20, 20, 20, 0.95);\n  padding-top: 15px;\n  display: flex;\n  position: fixed;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n  height: 45px;\n  svg {\n    fill: white;\n    height: 15px;\n  }\n  z-index: 10;\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n\nconst NavLink = styled(Link)`\n  color: white;\n  border-bottom: ${props =>\n    props.selected ? \"3px solid #3498db\" : \"3px solid transparent\"};\n  transition: border-bottom 0.5s ease-in-out;\n  padding-bottom: 10px;\n  width: 80px;\n  display: flex;\n  align-items: center;\n  font-size: 13px;\n  justify-content: center;\n`;\n\nexport default withRouter(({ location: { pathname } }) => (\n  <Header>\n    <NavLink selected={pathname === \"/\"} to=\"/\">\n      Movies\n    </NavLink>\n    <NavLink selected={pathname === \"/tv\"} to=\"/tv\">\n      TV\n    </NavLink>\n    <NavLink selected={pathname === \"/search\"} to=\"/search\">\n      Search\n    </NavLink>\n  </Header>\n));\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Loading from \"Components/Loading\";\nimport Section from \"Components/Section\";\nimport Poster from \"Components/Poster\";\nimport ErrorText from \"Components/ErrorText\";\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  padding-top: 50px;\n`;\n\nconst Form = styled.form`\n  all: unset;\n  width: 100%;\n  margin-bottom: 50px;\n`;\n\nconst Input = styled.input`\n  all: unset;\n  font-size: 36px;\n  color: white;\n  width: 100%;\n  padding-bottom: 10px;\n  color: white;\n`;\n\nconst SearchPresenter = ({\n  loading,\n  movieResults,\n  showResults,\n  searchingBy,\n  onSearchChange,\n  onSearchSubmit,\n  error\n}) => (\n  <Container>\n    <Form onSubmit={onSearchSubmit}>\n      <Input\n        placeholder=\"Search for a Movie or TV Show\"\n        autoFocus={true}\n        value={searchingBy}\n        onChange={onSearchChange}\n      />\n    </Form>\n    {loading ? (\n      <Loading />\n    ) : (\n      <>\n        {movieResults && movieResults.length !== 0 && (\n          <Section title=\"Movie Results\">\n            {movieResults.map(movie => (\n              <Poster\n                imageUrl={movie.poster_path}\n                rating={movie.vote_average}\n                name={movie.title}\n                year={movie.release_date.substring(0, 4)}\n                isTv={false}\n                id={movie.id}\n                key={movie.id}\n              />\n            ))}\n          </Section>\n        )}\n        {showResults && showResults.length !== 0 && (\n          <Section title=\"TV Show Results\">\n            {showResults.map(show => (\n              <Poster\n                imageUrl={show.poster_path}\n                rating={show.vote_average}\n                name={show.original_name}\n                year={String(show.first_air_date).substring(0, 4)}\n                isTv={true}\n                id={show.id}\n                key={show.id}\n              />\n            ))}\n          </Section>\n        )}\n      </>\n    )}\n    {error && <ErrorText text={error} />}\n    {movieResults &&\n      movieResults.length === 0 &&\n      showResults &&\n      showResults.length === 0 && <ErrorText text={\"Nothing was found\"} />}\n  </Container>\n);\n\nSearchPresenter.propTypes = {\n  searchingBy: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  movieResults: PropTypes.array,\n  showResults: PropTypes.array,\n  error: PropTypes.string,\n  onSearchChange: PropTypes.func.isRequired,\n  onSearchSubmit: PropTypes.func.isRequired\n};\n\nexport default SearchPresenter;\n","import SearchContainer from \"./SearchContainer\";\n\nexport default SearchContainer;\n","import React, { useState } from \"react\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { movies, tv } from \"../../api\";\nimport { useApi } from \"../../hooks\";\n\nexport default () => {\n  const search = async searchingBy => {\n    setLoading(true);\n    const {\n      data: { results: movieResults }\n    } = await movies.searchMovies(searchingBy);\n    const {\n      data: { results: showResults }\n    } = await tv.searchTv(searchingBy);\n    setData({\n      movieResults,\n      showResults\n    });\n  };\n  const [searchingBy, setSearchingBy] = useState(\"\");\n  const [data, setData] = useState({\n    movieResults: null,\n    showResults: null\n  });\n  const { loading, error, setLoading, wrappedFn } = useApi({\n    initialLoading: false,\n    inputFn: search,\n    errorMessage: \"Can't search\"\n  });\n\n  const onSearchChange = event => {\n    const {\n      target: { value }\n    } = event;\n    setSearchingBy(value);\n  };\n\n  const onSearchSubmit = event => {\n    event.preventDefault();\n    if (searchingBy !== \"\") {\n      wrappedFn(searchingBy);\n    }\n  };\n\n  return (\n    <SearchPresenter\n      loading={loading}\n      error={error}\n      movieResults={data.movieResults}\n      showResults={data.showResults}\n      searchingBy={searchingBy}\n      onSearchChange={onSearchChange}\n      onSearchSubmit={onSearchSubmit}\n    />\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Container = styled.a`\n  color: rgba(255, 255, 255, 0.7);\n  transition: color 0.3s ease-in-out;\n  display: flex;\n  align-items: center;\n  &:hover {\n    color: white;\n    svg {\n      fill: white;\n    }\n  }\n  svg {\n    margin-right: 10px;\n    transition: color 0.3s ease-in-out;\n    fill: rgba(255, 255, 255, 0.7);\n  }\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nconst YTLink = ({ id, title }) => (\n  <Container href={`https://www.youtube.com/watch?v=${id}`} target=\"_blank\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"18\"\n      height=\"18\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\" />\n    </svg>{\" \"}\n    {title}\n  </Container>\n);\n\nYTLink.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nexport default YTLink;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Loading from \"Components/Loading\";\nimport ErrorText from \"Components/ErrorText\";\nimport YTLink from \"Components/YTLink\";\n\nconst Container = styled.div`\n  position: relative;\n  padding: 80px;\n  height: 100%;\n  width: 100%;\n  height: calc(100vh - 45px);\n`;\n\nconst Background = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)),\n    url(${props => props.bgImage});\n  background-size: 100%;\n  background-position: center center;\n  position: absolute;\n  filter: blur(5px);\n  top: 0;\n  left: 0;\n  z-index: 0;\n`;\nconst Content = styled.div`\n  position: relative;\n  z-index: 9;\n  width: 100%;\n  min-height: 100%;\n  display: flex;\n  overflow: scroll;\n`;\n\nconst Poster = styled.div`\n  width: 30%;\n  background-image: url(${props => props.bgImage});\n  background-size: cover;\n  border-radius: 7px;\n  background-position: center center;\n`;\n\nconst Data = styled.div`\n  color: rgba(255, 255, 255, 0.9);\n  margin-left: 20px;\n  font-size: 12px;\n  width: 70%;\n`;\n\nconst Name = styled.span`\n  font-size: 42px;\n  color: white;\n`;\n\nconst InfoRow = styled.div`\n  margin-top: 20px;\n`;\n\nconst InfoItem = styled.span``;\n\nconst Bullet = styled.span`\n  margin: 0 10px;\n`;\n\nconst Overview = styled.p`\n  margin-top: 20px;\n  margin-bottom: 25px;\n  width: 50%;\n  line-height: 2;\n`;\n\nconst Title = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  color: white;\n  margin-top: 30px;\n  margin-bottom: 10px;\n`;\n\nconst CountryName = styled.div`\n  margin-left: 10px;\n  font-size: 14px;\n`;\n\nconst CompanyLogoContainer = styled.div`\n  display: flex;\n`;\n\nconst CompanyLogo = styled.div`\n  width: 100px;\n  height: 100px;\n  background-image: url(${props => props.bgImage});\n  background-size: contain;\n  border-radius: 7px;\n  background-position: center center;\n  display: flex;\n`;\n\nconst PosterContainer = styled.div`\n  display:block;\n  margin: 0px 10px;\n`;\n\nconst PosterImg = styled.div`\n  display:block;\n  width: 100px;\n  height: 148px;\n  background-image: url(${props => props.bgImage});\n  background-size: contain;\n  border-radius: 7px;\n  background-position: center center;\n`;\n\nconst PosterName = styled.span`\n  margin: 0px 10px;\n  font-size: 16px;\n`;\n\nconst DetailPresenter = ({ loading, result, error }) =>\n  loading ? (\n    <Loading />\n  ) : error ? (\n    <ErrorText text={error} />\n  ) : (\n    <Container>\n      <Background\n        bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\n      />\n      <Content>\n        <Poster\n          bgImage={`https://image.tmdb.org/t/p/w500${result.poster_path}`}\n        />\n        <Data>\n          <Name>\n            {result.original_name\n              ? result.original_name\n              : result.original_title}\n          </Name>\n          <InfoRow>\n            <InfoItem>\n              {result.first_air_date\n                ? result.first_air_date.substring(0, 4)\n                : result.release_date.substring(0, 4)}\n            </InfoItem>\n            <Bullet>•</Bullet>\n            <InfoItem>\n              {result.episode_run_time\n                ? result.episode_run_time\n                : result.runtime}{\" \"}\n              min\n            </InfoItem>\n            <Bullet>•</Bullet>\n            <InfoItem>\n              {result.genres &&\n                result.genres.map((genre, index) => {\n                  if (index + 1 === result.genres.length) {\n                    return genre.name;\n                  } else {\n                    return `${genre.name} / `;\n                  }\n                })}\n            </InfoItem>\n            <Bullet>•</Bullet>\n            {result.status && <InfoItem>{result.status}</InfoItem>}\n            {result.vote_average && result.vote_average !== 0 ? (\n              <>\n                <Bullet>•</Bullet>\n                <InfoItem>\n                  <span role=\"img\" aria-label=\"rating\">\n                    ⭐️\n                  </span>{\" \"}\n                  {result.vote_average} / 10\n                </InfoItem>\n              </>\n            ) : null}\n          </InfoRow>\n          {result.overview && <Overview>{result.overview}</Overview>}\n\n          <Title>Production Companies</Title>\n          <CompanyLogoContainer>\n            {result.production_companies &&\n              result.production_companies.map(\n                company =>\n                  company.logo_path && (\n                    <CompanyLogo\n                      bgImage={`https://image.tmdb.org/t/p/w200${company.logo_path}`}\n                    />\n                  )\n              )}\n          </CompanyLogoContainer>\n          {result.production_countries && <Title>Production Countries</Title>}\n          {result.production_countries &&\n            result.production_countries.map(country => (\n              <CountryName>• {country.name}</CountryName>\n            ))}\n\n          {result.seasons && <Title>Seasons</Title>}\n          <CompanyLogoContainer>\n            {result.seasons &&\n              result.seasons.map(\n                season =>\n                  season.poster_path && (\n                    <PosterContainer>\n                      <PosterImg\n                        bgImage={`https://image.tmdb.org/t/p/w200${season.poster_path}`}\n                      />\n                      <PosterName>{season.name}</PosterName>\n                    </PosterContainer>\n                  )\n              )}\n          </CompanyLogoContainer>\n\n          <Title>🖥YouTube</Title>\n          {result.videos &&\n            result.videos.results &&\n            result.videos.results.map(\n              video =>\n                video.site === \"YouTube\" && (\n                  <YTLink title={video.name} id={video.key} key={video.id} />\n                )\n            )}\n        </Data>\n      </Content>\n    </Container>\n  );\n\nDetailPresenter.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  result: PropTypes.object,\n  error: PropTypes.string\n};\n\nexport default DetailPresenter;\n","import DetailContainer from \"./DetailContainer\";\n\nexport default DetailContainer;\n","import React, { useState, useEffect } from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport { movies, tv } from \"../../api\";\nimport { useApi } from \"../../hooks\";\n\nexport default ({\n  location: { pathname },\n  match: {\n    params: { id }\n  }\n}) => {\n  const getDetail = async () => {\n    const isMovie = pathname.includes(\"movie\");\n    let result;\n    if (isMovie) {\n      const { data } = await movies.getMovie(id);\n      result = data;\n    } else {\n      const { data } = await tv.getShow(id);\n      result = data;\n    }\n    setResult(result);\n  };\n\n  const { loading, error, wrappedFn } = useApi({\n    errorMessage: \"Can't find what you're looking for\",\n    inputFn: getDetail\n  });\n  const [result, setResult] = useState(null);\n\n  useEffect(() => {\n    wrappedFn();\n  }, []);\n\n  return <DetailPresenter loading={loading} result={result} error={error} />;\n};\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from \"react-router-dom\";\nimport Home from \"Routes/Home\";\nimport TV from \"Routes/TV\";\nimport Header from \"./Header\";\nimport Search from \"Routes/Search\";\nimport Detail from \"Routes/Detail\";\n\nexport default () => (\n  <Router>\n    <>\n      <Header />\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/tv\" component={TV} />\n        <Route path=\"/search\" component={Search} />\n        <Route path=\"/movie/:id\" component={Detail} />\n        <Route path=\"/show/:id\" component={Detail} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </>\n  </Router>\n);\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst GlobalStyles = createGlobalStyle`\n    ${reset};\n    *{\n        box-sizing:border-box;\n    }\n    a{\n        color:inherit;\n        text-decoration:none;\n    }\n    body{\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif !important;\n        font-size:14px;\n        padding-top:45px;\n        background-color:rgb(20, 20, 20);\n    }\n`;\n\nexport default GlobalStyles;\n","import React, { Component } from \"react\";\nimport Router from \"./Router\";\nimport GlobalStyles from \"./GlobalStyles\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}