{"version":3,"sources":["assets/noPoster.png","api.js","Components/Loading.js","Components/Poster.js","Components/Section.js","Components/ErrorText.js","Routes/Home/HomePresenter.js","hooks.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Components/Header.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Components/YTLink.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","api","axios","create","baseURL","params","api_key","language","movies","id","get","append_to_response","term","query","encodeURIComponent","tv","Container","styled","div","role","aria-label","Votes","span","Image","props","bgImage","ImageContainer","Name","Year","Poster","imageUrl","rating","name","year","isTv","to","require","length","substring","SectionTitle","h2","Grid","Section","title","children","ErrorText","text","HomePresenter","loading","error","popular","upcoming","nowPlaying","Loading","map","movie","poster_path","vote_average","release_date","key","useApi","initialLoading","inputFn","errorMessage","useState","setLoading","setError","wrappedFn","a","HomeContainer","getMovies","data","results","setData","useEffect","topRated","airingToday","show","original_name","first_air_date","TVContainer","TVPresenter","Header","nav","NavLink","Link","selected","withRouter","pathname","location","Form","form","Input","input","SearchPresenter","movieResults","showResults","searchingBy","onSearchChange","onSearchSubmit","onSubmit","placeholder","autoFocus","value","onChange","SearchContainer","search","setSearchingBy","event","target","preventDefault","YTLink","href","xmlns","width","height","viewBox","d","Background","Content","Data","InfoRow","InfoItem","Bullet","Overview","p","Title","CountryName","CompanyLogoContainer","CompanyLogo","PosterContainer","PosterImg","PosterName","DetailPresenter","result","backdrop_path","original_title","episode_run_time","runtime","genres","genre","index","status","overview","production_companies","company","logo_path","production_countries","country","seasons","season","videos","video","site","DetailContainer","match","includes","setResult","path","exact","component","Home","TV","Search","Detail","GlobalStyles","createGlobalStyle","reset","App","Router","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f5c3574.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noPoster.c7ad09df.png\";","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n  params: { api_key: \"10923b261ba94d897ac6b81148314a3f\", language: \"en-US\" }\r\n});\r\n\r\nexport const movies = {\r\n  getMovie: id =>\r\n    api.get(`movie/${id}`, { params: { append_to_response: \"videos\" } }),\r\n  getPopular: () => api.get(\"movie/popular\"),\r\n  getUpcoming: () => api.get(\"movie/upcoming\"),\r\n  getNowPlaying: () => api.get(\"movie/now_playing\"),\r\n  searchMovies: term =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};\r\n\r\nexport const tv = {\r\n  getShow: id =>\r\n    api.get(`tv/${id}`, { params: { append_to_response: \"videos\" } }),\r\n  getPopular: () => api.get(\"tv/popular\"),\r\n  getTopRated: () => api.get(\"tv/top_rated\"),\r\n  getAiringToday: () => api.get(\"tv/airing_today\"),\r\n  searchTv: term =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term)\r\n      }\r\n    })\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 80vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-content: flex-start;\r\n  margin-top: 50px;\r\n  font-size: 30px;\r\n`;\r\n\r\nexport default () => (\r\n  <Container>\r\n    <span role=\"img\" aria-label=\"loading\">\r\n      ⏰\r\n    </span>\r\n  </Container>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Container = styled.div`\r\n  color: white;\r\n  width: 125px;\r\n`;\r\n\r\nconst Votes = styled.span`\r\n  font-size: 12px;\r\n  position: relative;\r\n  z-index: 9;\r\n  transition: opacity 0.3s ease-in-out;\r\n`;\r\n\r\nconst Image = styled.div`\r\n  background-image: url(${props => props.bgImage});\r\n  background-size: cover;\r\n  background-position: center center;\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 2px 5px 3px rgba(0, 0, 0, 0.5);\r\n  transition: opacity 0.3s ease-in-out;\r\n  z-index: 1;\r\n`;\r\n\r\nconst ImageContainer = styled.div`\r\n  position: relative;\r\n  z-index: 2;\r\n  height: 180px;\r\n  margin-bottom: 5px;\r\n  display: flex;\r\n  align-items: flex-end;\r\n  justify-content: flex-end;\r\n  padding: 5px;\r\n  ${Votes} {\r\n    opacity: 0;\r\n  }\r\n  &:hover {\r\n    ${Votes} {\r\n      opacity: 1;\r\n    }\r\n    ${Image} {\r\n      opacity: 0.3;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Name = styled.span`\r\n  color: rgba(255, 255, 255, 0.8);\r\n  display: block;\r\n  margin-bottom: 7px;\r\n  text-overflow: ellipsis;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ imageUrl, rating, name, year, isTv, id }) => (\r\n  <Link to={isTv ? `/show/${id}` : `/movie/${id}`}>\r\n    <Container>\r\n      <ImageContainer>\r\n        <Image\r\n          bgImage={\r\n            imageUrl\r\n              ? `https://image.tmdb.org/t/p/w500${imageUrl}`\r\n              : require(\"../assets/noPoster.png\")\r\n          }\r\n        />\r\n        {rating > 0 ? (\r\n          <Votes>\r\n            <span role=\"img\" aria-label=\"Stars\">\r\n              ⭐️\r\n            </span>{\" \"}\r\n            {rating}/10\r\n          </Votes>\r\n        ) : null}\r\n      </ImageContainer>\r\n\r\n      <Name>{name.length > 18 ? `${name.substring(0, 18)}...` : name}</Name>\r\n\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  imageUrl: PropTypes.string,\r\n  rating: PropTypes.number,\r\n  name: PropTypes.string.isRequired,\r\n  year: PropTypes.string.isRequired,\r\n  isTv: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Poster;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nconst SectionTitle = styled.h2`\r\n  font-weight: 600;\r\n  color: white;\r\n  font-size: 14px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  grid-gap: 30px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  <Container>\r\n    <SectionTitle>{title}</SectionTitle>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node\r\n  ])\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.span`\r\n  display: block;\r\n  color: #e74c3c;\r\n  width: 100%;\r\n  text-align: center;\r\n  margin-top: 50px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst ErrorText = ({ text }) => <Container>{text}</Container>;\r\n\r\nErrorText.propTypes = {\r\n  text: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ErrorText;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loading from \"Components/Loading\";\r\nimport Poster from \"Components/Poster\";\r\nimport Section from \"Components/Section\";\r\nimport ErrorText from \"Components/ErrorText\";\r\n\r\nconst Container = styled.div`\r\n  padding: 10px;\r\n  padding-top: 30px;\r\n`;\r\n\r\nconst HomePresenter = ({ loading, error, popular, upcoming, nowPlaying }) =>\r\n  loading ? (\r\n    <Loading />\r\n  ) : (\r\n    <Container>\r\n      {popular && (\r\n        <Section title=\"Popular Movies\">\r\n          {popular.map(movie => (\r\n            <Poster\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              name={movie.title}\r\n              year={movie.release_date.substring(0, 4)}\r\n              isTv={false}\r\n              id={movie.id}\r\n              key={movie.id}\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {upcoming && (\r\n        <Section title=\"Upcoming Movies\">\r\n          {upcoming.map(movie => (\r\n            <Poster\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              name={movie.title}\r\n              year={movie.release_date.substring(0, 4)}\r\n              isTv={false}\r\n              id={movie.id}\r\n              key={movie.id}\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {nowPlaying && (\r\n        <Section title=\"Now Playing\">\r\n          {nowPlaying.map(movie => (\r\n            <Poster\r\n              imageUrl={movie.poster_path}\r\n              rating={movie.vote_average}\r\n              name={movie.title}\r\n              year={movie.release_date.substring(0, 4)}\r\n              isTv={false}\r\n              id={movie.id}\r\n              key={movie.id}\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {error && <ErrorText text={error} />}\r\n    </Container>\r\n  );\r\n\r\nHomePresenter.propTypes = {\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n  popular: PropTypes.array,\r\n  upcoming: PropTypes.array,\r\n  nowPlaying: PropTypes.array\r\n};\r\n\r\nexport default HomePresenter;\r\n","import { useState } from \"react\";\r\n\r\nexport const useApi = ({ initialLoading = true, inputFn, errorMessage }) => {\r\n  const [loading, setLoading] = useState(initialLoading);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const wrappedFn = async (...args) => {\r\n    try {\r\n      await inputFn(...args);\r\n    } catch (error) {\r\n      setError(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { loading, error, wrappedFn, setLoading };\r\n};\r\n","import HomeContainer from \"./HomeContainer\";\r\nexport default HomeContainer;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { movies } from \"../../api\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { useApi } from \"../../hooks\";\r\n\r\nexport default () => {\r\n  const getMovies = async () => {\r\n    const {\r\n      data: { results: popular }\r\n    } = await movies.getPopular();\r\n    const {\r\n      data: { results: upcoming }\r\n    } = await movies.getUpcoming();\r\n    const {\r\n      data: { results: nowPlaying }\r\n    } = await movies.getNowPlaying();\r\n    setData({\r\n      popular,\r\n      upcoming,\r\n      nowPlaying\r\n    });\r\n  };\r\n\r\n  const [data, setData] = useState({\r\n    popular: null,\r\n    upcoming: null,\r\n    nowPlaying: null\r\n  });\r\n  const { loading, error, wrappedFn } = useApi({\r\n    inputFn: getMovies,\r\n    errorMessage: \"Could not get movies\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    wrappedFn(\"dick\", true);\r\n  }, []);\r\n\r\n  return (\r\n    <HomePresenter\r\n      loading={loading}\r\n      error={error}\r\n      popular={data.popular}\r\n      upcoming={data.upcoming}\r\n      nowPlaying={data.nowPlaying}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loading from \"Components/Loading\";\r\nimport Poster from \"Components/Poster\";\r\nimport Section from \"Components/Section\";\r\nimport ErrorText from \"Components/ErrorText\";\r\n\r\nconst Container = styled.div`\r\n  padding: 10px;\r\n  padding-top: 30px;\r\n`;\r\n\r\nconst HomePresenter = ({ loading, error, popular, topRated, airingToday }) =>\r\n  loading ? (\r\n    <Loading />\r\n  ) : (\r\n    <Container>\r\n      {popular && (\r\n        <Section title=\"Popular Shows\">\r\n          {popular.map(show => (\r\n            <Poster\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              name={show.original_name}\r\n              year={show.first_air_date.substring(0, 4)}\r\n              isTv={true}\r\n              id={show.id}\r\n              key={show.id}\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {topRated && (\r\n        <Section title=\"Top Rated\">\r\n          {topRated.map(show => (\r\n            <Poster\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              name={show.original_name}\r\n              year={show.first_air_date.substring(0, 4)}\r\n              isTv={true}\r\n              id={show.id}\r\n              key={show.id}\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {airingToday && (\r\n        <Section title=\"Airing Today\">\r\n          {airingToday.map(show => (\r\n            <Poster\r\n              imageUrl={show.poster_path}\r\n              rating={show.vote_average}\r\n              name={show.original_name}\r\n              year={show.first_air_date.substring(0, 4)}\r\n              isTv={true}\r\n              id={show.id}\r\n              key={show.id}\r\n            />\r\n          ))}\r\n        </Section>\r\n      )}\r\n      {error && <ErrorText text={error} />}\r\n    </Container>\r\n  );\r\n\r\nHomePresenter.propTypes = {\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.string,\r\n  popular: PropTypes.array,\r\n  topRated: PropTypes.array,\r\n  airingToday: PropTypes.array\r\n};\r\n\r\nexport default HomePresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tv } from \"../../api\";\r\nimport { useApi } from \"../../hooks\";\r\n\r\nexport default () => {\r\n  const getTv = async () => {\r\n    const {\r\n      data: { results: popular }\r\n    } = await tv.getPopular();\r\n    const {\r\n      data: { results: topRated }\r\n    } = await tv.getTopRated();\r\n    const {\r\n      data: { results: airingToday }\r\n    } = await tv.getAiringToday();\r\n    setData({\r\n      popular,\r\n      topRated,\r\n      airingToday\r\n    });\r\n  };\r\n\r\n  const { loading, error, wrappedFn } = useApi({\r\n    inputFn: getTv,\r\n    errorMessage: \"Could not get tv shows\"\r\n  });\r\n  const [data, setData] = useState({\r\n    popular: null,\r\n    topRated: null,\r\n    airingToday: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    wrappedFn();\r\n  }, []);\r\n\r\n  return (\r\n    <TVPresenter\r\n      loading={loading}\r\n      error={error}\r\n      popular={data.popular}\r\n      topRated={data.topRated}\r\n      airingToday={data.airingToday}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.nav`\r\n  background-color: rgba(20, 20, 20, 0.95);\r\n  padding-top: 15px;\r\n  display: flex;\r\n  position: fixed;\r\n  width: 100%;\r\n  top: 0px;\r\n  left: 0px;\r\n  height: 45px;\r\n  svg {\r\n    fill: white;\r\n    height: 15px;\r\n  }\r\n  z-index: 10;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst NavLink = styled(Link)`\r\n  color: white;\r\n  border-bottom: ${props =>\r\n    props.selected ? \"3px solid #3498db\" : \"3px solid transparent\"};\r\n  transition: border-bottom 0.5s ease-in-out;\r\n  padding-bottom: 10px;\r\n  width: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 13px;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default withRouter(({ location: { pathname } }) => (\r\n  <Header>\r\n    <NavLink selected={pathname === \"/\"} to=\"/\">\r\n      Movies\r\n    </NavLink>\r\n    <NavLink selected={pathname === \"/tv\"} to=\"/tv\">\r\n      TV\r\n    </NavLink>\r\n    <NavLink selected={pathname === \"/search\"} to=\"/search\">\r\n      Search\r\n    </NavLink>\r\n  </Header>\r\n));\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loading from \"Components/Loading\";\r\nimport Section from \"Components/Section\";\r\nimport Poster from \"Components/Poster\";\r\nimport ErrorText from \"Components/ErrorText\";\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  padding-top: 50px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  all: unset;\r\n  width: 100%;\r\n  margin-bottom: 50px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 36px;\r\n  color: white;\r\n  width: 100%;\r\n  padding-bottom: 10px;\r\n`;\r\n\r\nconst SearchPresenter = ({\r\n  loading,\r\n  movieResults,\r\n  showResults,\r\n  searchingBy,\r\n  onSearchChange,\r\n  onSearchSubmit,\r\n  error\r\n}) => (\r\n  <Container>\r\n    <Form onSubmit={onSearchSubmit}>\r\n      <Input\r\n        placeholder=\"Search for a Movie or TV Show\"\r\n        autoFocus={true}\r\n        value={searchingBy}\r\n        onChange={onSearchChange}\r\n      />\r\n    </Form>\r\n    {loading ? (\r\n      <Loading />\r\n    ) : (\r\n      <>\r\n        {movieResults && movieResults.length !== 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map(movie => (\r\n              <Poster\r\n                imageUrl={movie.poster_path}\r\n                rating={movie.vote_average}\r\n                name={movie.title}\r\n                year={movie.release_date.substring(0, 4)}\r\n                isTv={false}\r\n                id={movie.id}\r\n                key={movie.id}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {showResults && showResults.length !== 0 && (\r\n          <Section title=\"TV Show Results\">\r\n            {showResults.map(show => (\r\n              <Poster\r\n                imageUrl={show.poster_path}\r\n                rating={show.vote_average}\r\n                name={show.original_name}\r\n                year={show.first_air_date.substring(0, 4)}\r\n                isTv={true}\r\n                id={show.id}\r\n                key={show.id}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n      </>\r\n    )}\r\n    {error && <ErrorText text={error} />}\r\n    {movieResults &&\r\n      movieResults.length === 0 &&\r\n      showResults &&\r\n      showResults.length === 0 && <ErrorText text={\"Nothing was found\"} />}\r\n  </Container>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n  searchingBy: PropTypes.string.isRequired,\r\n  loading: PropTypes.bool.isRequired,\r\n  movieResults: PropTypes.array,\r\n  showResults: PropTypes.array,\r\n  error: PropTypes.string,\r\n  onSearchChange: PropTypes.func.isRequired,\r\n  onSearchSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;\r\n","import React, { useState } from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\nimport { movies, tv } from \"../../api\";\r\nimport { useApi } from \"../../hooks\";\r\n\r\nexport default () => {\r\n  const search = async searchingBy => {\r\n    setLoading(true);\r\n    const {\r\n      data: { results: movieResults }\r\n    } = await movies.searchMovies(searchingBy);\r\n    const {\r\n      data: { results: showResults }\r\n    } = await tv.searchTv(searchingBy);\r\n    setData({\r\n      movieResults,\r\n      showResults\r\n    });\r\n  };\r\n  const [searchingBy, setSearchingBy] = useState(\"\");\r\n  const [data, setData] = useState({\r\n    movieResults: null,\r\n    showResults: null\r\n  });\r\n  const { loading, error, setLoading, wrappedFn } = useApi({\r\n    initialLoading: false,\r\n    inputFn: search,\r\n    errorMessage: \"Can't search\"\r\n  });\r\n\r\n  const onSearchChange = event => {\r\n    const {\r\n      target: { value }\r\n    } = event;\r\n    setSearchingBy(value);\r\n  };\r\n\r\n  const onSearchSubmit = event => {\r\n    event.preventDefault();\r\n    if (searchingBy !== \"\") {\r\n      wrappedFn(searchingBy);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchPresenter\r\n      loading={loading}\r\n      error={error}\r\n      movieResults={data.movieResults}\r\n      showResults={data.showResults}\r\n      searchingBy={searchingBy}\r\n      onSearchChange={onSearchChange}\r\n      onSearchSubmit={onSearchSubmit}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Container = styled.a`\r\n  color: rgba(255, 255, 255, 0.7);\r\n  transition: color 0.3s ease-in-out;\r\n  display: flex;\r\n  align-items: center;\r\n  &:hover {\r\n    color: white;\r\n    svg {\r\n      fill: white;\r\n    }\r\n  }\r\n  svg {\r\n    margin-right: 10px;\r\n    transition: color 0.3s ease-in-out;\r\n    fill: rgba(255, 255, 255, 0.7);\r\n  }\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst YTLink = ({ id, title }) => (\r\n  <Container href={`https://www.youtube.com/watch?v=${id}`} target=\"_blank\">\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"18\"\r\n      height=\"18\"\r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\" />\r\n    </svg>{\" \"}\r\n    {title}\r\n  </Container>\r\n);\r\n\r\nYTLink.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default YTLink;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Loading from \"Components/Loading\";\r\nimport ErrorText from \"Components/ErrorText\";\r\nimport YTLink from \"Components/YTLink\";\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  padding: 80px;\r\n  height: 100%;\r\n  width: 100%;\r\n  height: calc(100vh - 45px);\r\n`;\r\n\r\nconst Background = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-image: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)),\r\n    url(${props => props.bgImage});\r\n  background-size: 100%;\r\n  background-position: center center;\r\n  position: absolute;\r\n  filter: blur(5px);\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 0;\r\n`;\r\nconst Content = styled.div`\r\n  position: relative;\r\n  z-index: 9;\r\n  width: 100%;\r\n  min-height: 100%;\r\n  display: flex;\r\n  overflow: scroll;\r\n`;\r\n\r\nconst Poster = styled.div`\r\n  width: 30%;\r\n  background-image: url(${props => props.bgImage});\r\n  background-size: cover;\r\n  border-radius: 7px;\r\n  background-position: center center;\r\n`;\r\n\r\nconst Data = styled.div`\r\n  color: rgba(255, 255, 255, 0.9);\r\n  margin-left: 20px;\r\n  font-size: 12px;\r\n  width: 70%;\r\n`;\r\n\r\nconst Name = styled.span`\r\n  font-size: 42px;\r\n  color: white;\r\n`;\r\n\r\nconst InfoRow = styled.div`\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst InfoItem = styled.span``;\r\n\r\nconst Bullet = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  margin-top: 20px;\r\n  margin-bottom: 25px;\r\n  width: 50%;\r\n  line-height: 2;\r\n`;\r\n\r\nconst Title = styled.p`\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n  color: white;\r\n  margin-top: 30px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst CountryName = styled.div`\r\n  margin-left: 10px;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst CompanyLogoContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst CompanyLogo = styled.div`\r\n  width: 100px;\r\n  height: 100px;\r\n  background-image: url(${props => props.bgImage});\r\n  background-size: contain;\r\n  border-radius: 7px;\r\n  background-position: center center;\r\n  display: flex;\r\n`;\r\n\r\nconst PosterContainer = styled.div`\r\n  display:block;\r\n  margin: 0px 10px;\r\n`;\r\n\r\nconst PosterImg = styled.div`\r\n  display:block;\r\n  width: 100px;\r\n  height: 148px;\r\n  background-image: url(${props => props.bgImage});\r\n  background-size: contain;\r\n  border-radius: 7px;\r\n  background-position: center center;\r\n`;\r\n\r\nconst PosterName = styled.span`\r\n  margin: 0px 10px;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst DetailPresenter = ({ loading, result, error }) =>\r\n  loading ? (\r\n    <Loading />\r\n  ) : error ? (\r\n    <ErrorText text={error} />\r\n  ) : (\r\n    <Container>\r\n      <Background\r\n        bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\r\n      />\r\n      <Content>\r\n        <Poster\r\n          bgImage={`https://image.tmdb.org/t/p/w500${result.poster_path}`}\r\n        />\r\n        <Data>\r\n          <Name>\r\n            {result.original_name\r\n              ? result.original_name\r\n              : result.original_title}\r\n          </Name>\r\n          <InfoRow>\r\n            <InfoItem>\r\n              {result.first_air_date\r\n                ? result.first_air_date.substring(0, 4)\r\n                : result.release_date.substring(0, 4)}\r\n            </InfoItem>\r\n            <Bullet>•</Bullet>\r\n            <InfoItem>\r\n              {result.episode_run_time\r\n                ? result.episode_run_time\r\n                : result.runtime}{\" \"}\r\n              min\r\n            </InfoItem>\r\n            <Bullet>•</Bullet>\r\n            <InfoItem>\r\n              {result.genres &&\r\n                result.genres.map((genre, index) => {\r\n                  if (index + 1 === result.genres.length) {\r\n                    return genre.name;\r\n                  } else {\r\n                    return `${genre.name} / `;\r\n                  }\r\n                })}\r\n            </InfoItem>\r\n            <Bullet>•</Bullet>\r\n            {result.status && <InfoItem>{result.status}</InfoItem>}\r\n            {result.vote_average && result.vote_average !== 0 ? (\r\n              <>\r\n                <Bullet>•</Bullet>\r\n                <InfoItem>\r\n                  <span role=\"img\" aria-label=\"rating\">\r\n                    ⭐️\r\n                  </span>{\" \"}\r\n                  {result.vote_average} / 10\r\n                </InfoItem>\r\n              </>\r\n            ) : null}\r\n          </InfoRow>\r\n          {result.overview && <Overview>{result.overview}</Overview>}\r\n\r\n          <Title>Production Companies</Title>\r\n          <CompanyLogoContainer>\r\n            {result.production_companies &&\r\n              result.production_companies.map(\r\n                company =>\r\n                  company.logo_path && (\r\n                    <CompanyLogo\r\n                      bgImage={`https://image.tmdb.org/t/p/w200${company.logo_path}`}\r\n                    />\r\n                  )\r\n              )}\r\n          </CompanyLogoContainer>\r\n          {result.production_countries && <Title>Production Countries</Title>}\r\n          {result.production_countries &&\r\n            result.production_countries.map(country => (\r\n              <CountryName>• {country.name}</CountryName>\r\n            ))}\r\n\r\n          {result.seasons && <Title>Seasons</Title>}\r\n          <CompanyLogoContainer>\r\n            {result.seasons &&\r\n              result.seasons.map(\r\n                season =>\r\n                  season.poster_path && (\r\n                    <PosterContainer>\r\n                      <PosterImg\r\n                        bgImage={`https://image.tmdb.org/t/p/w200${season.poster_path}`}\r\n                      />\r\n                      <PosterName>{season.name}</PosterName>\r\n                    </PosterContainer>\r\n                  )\r\n              )}\r\n          </CompanyLogoContainer>\r\n\r\n          <Title>🖥YouTube</Title>\r\n          {result.videos &&\r\n            result.videos.results &&\r\n            result.videos.results.map(\r\n              video =>\r\n                video.site === \"YouTube\" && (\r\n                  <YTLink title={video.name} id={video.key} key={video.id} />\r\n                )\r\n            )}\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  );\r\n\r\nDetailPresenter.propTypes = {\r\n  loading: PropTypes.bool.isRequired,\r\n  result: PropTypes.object,\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default DetailPresenter;\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\nimport { movies, tv } from \"../../api\";\r\nimport { useApi } from \"../../hooks\";\r\n\r\nexport default ({\r\n  location: { pathname },\r\n  match: {\r\n    params: { id }\r\n  }\r\n}) => {\r\n  const getDetail = async () => {\r\n    const isMovie = pathname.includes(\"movie\");\r\n    let result;\r\n    if (isMovie) {\r\n      const { data } = await movies.getMovie(id);\r\n      result = data;\r\n    } else {\r\n      const { data } = await tv.getShow(id);\r\n      result = data;\r\n    }\r\n    setResult(result);\r\n  };\r\n\r\n  const { loading, error, wrappedFn } = useApi({\r\n    errorMessage: \"Can't find what you're looking for\",\r\n    inputFn: getDetail\r\n  });\r\n  const [result, setResult] = useState(null);\r\n\r\n  useEffect(() => {\r\n    wrappedFn();\r\n  }, []);\r\n\r\n  return <DetailPresenter loading={loading} result={result} error={error} />;\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch\r\n} from \"react-router-dom\";\r\nimport Home from \"Routes/Home\";\r\nimport TV from \"Routes/TV\";\r\nimport Header from \"./Header\";\r\nimport Search from \"Routes/Search\";\r\nimport Detail from \"Routes/Detail\";\r\n\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" component={TV} />\r\n        <Route path=\"/search\" component={Search} />\r\n        <Route path=\"/movie/:id\" component={Detail} />\r\n        <Route path=\"/show/:id\" component={Detail} />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    ${reset};\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    a{\r\n        color:inherit;\r\n        text-decoration:none;\r\n    }\r\n    body{\r\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif !important;\r\n        font-size:14px;\r\n        padding-top:45px;\r\n        background-color:rgb(20, 20, 20);\r\n    }\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","import React, { Component } from \"react\";\r\nimport Router from \"./Router\";\r\nimport GlobalStyles from \"./GlobalStyles\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Router />\r\n        <GlobalStyles />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"Components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}